// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                       String   @id @default(cuid())
    createdAt                DateTime @default(now())
    updatedAt                DateTime @updatedAt
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?  @db.VarChar(500)
    access_token             String?  @db.VarChar(500)
    refresh_token_expires_in Int?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?  @db.Text
    session_state            String?
    oauth_token_secret       String?
    oauth_token              String?
    user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Image {
    id        String    @id @default(cuid())
    avatars   Profile[] @relation(name: "AvatarFile")
    type      String
    url       String
    mime      String
    name      String
    extension String
    size      Int
    height    Int?
    width     Int?
    createdAt DateTime  @default(now())
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model Profile {
    id           String        @id @default(cuid())
    user         User          @relation(fields: [userId], references: [id])
    userId       String        @unique
    name         String
    tutorProfile Tutor?
    avatar       Image?        @relation(name: "AvatarFile", fields: [avatarId], references: [id], onDelete: Cascade)
    avatarId     String?       @unique
    biography    String?
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    appointment  Appointment[]

    @@index([userId])
}

model Tutor {
    id           String         @id @default(cuid())
    profile      Profile        @relation(fields: [profileId], references: [id])
    profileId    String         @unique
    hourlyRate   Float          @default(0)
    subjects     Subject[]
    appointments Appointment[]
    availability Availability[]
}

model Availability {
    id      String   @id @default(cuid())
    tutor   Tutor    @relation(fields: [tutorId], references: [id])
    tutorId String
    start   DateTime
    end     DateTime

    @@index([tutorId])
}

model Subject {
    id           String        @id @default(cuid())
    name         String        @unique
    tutors       Tutor[]
    appointments Appointment[]
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
}

model Appointment {
    id          String            @id @default(cuid())
    student     Profile           @relation(fields: [studentId], references: [id])
    studentId   String            @unique
    tutor       Tutor             @relation(fields: [tutorId], references: [id])
    tutorId     String
    subject     Subject           @relation(fields: [subjectId], references: [id])
    subjectId   String
    title       String
    description String?
    start       DateTime
    end         DateTime
    price       Float
    status      AppointmentStatus @default(SCHEDULED)
    // payment      Payment?
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt

    @@index([studentId])
    @@index([tutorId])
    @@index([subjectId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?
    accounts      Account[]
    sessions      Session[]
    profile       Profile?
    role          Role      @default(USER)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Role {
    USER
    ADMIN
    SUPERUSER
}

enum SubjectLevel {
    ELEMENTARY
    MIDDLE_SCHOOL
    HIGH_SCHOOL
    AP
    COLLEGE
}

enum AppointmentStatus {
    SCHEDULED
    CANCELLED
    COMPLETED
}
