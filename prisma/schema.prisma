// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    password      String?
    accounts      Account[]
    sessions      Session[]
    role          Role          @default(USER)
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    tutorProfile  Tutor?
    appointments  Appointment[]
    messages      Message[]
    reviews       Review[]
    conversations Participant[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model Tutor {
    id                    String            @id @default(cuid())
    user                  User              @relation(fields: [userId], references: [id])
    userId                String            @unique
    hourlyRate            Float?            @default(0)
    biography             String?           @db.Text
    headline              String?
    subjects              Subject[]
    appointments          Appointment[]
    availability          Availability[]
    age                   Int?
    phone                 String?
    location              Location?         @relation(fields: [locationId], references: [id])
    locationId            String?           @unique
    isWorkAuthorized      Boolean?
    needsVisaSponsorship  Boolean?
    hasVisaDependency     Boolean?
    hasInternetConnection Boolean?
    hasTechnicalKnowledge Boolean?
    hasMicrophone         Boolean?
    hasWebcam             Boolean?
    education             Education?        @relation(fields: [educationId], references: [id])
    educationId           String?           @unique
    employment            Employment?       @relation(fields: [employmentId], references: [id])
    employmentId          String?           @unique
    createdAt             DateTime          @default(now())
    updatedAt             DateTime          @updatedAt
    resume                String?
    applicationStatus     ApplicationStatus @default(welcome)
    reviews               Review[]
    averageRating         Float?
}

model Education {
    id           String  @id @default(cuid())
    school       String
    degree       String
    fieldOfStudy String
    yearStarted  String
    yearEnded    String?
    monthStarted String
    monthEnded   String?
    tutor        Tutor?
}

model Employment {
    id           String @id @default(cuid())
    title        String
    type         String
    companyName  String
    yearStarted  String
    yearEnded    String
    monthStarted String
    monthEnded   String
    tutor        Tutor?
}

model Location {
    id       String  @id @default(cuid())
    address  String
    address2 String?
    city     String
    state    String
    zip      String
    country  String
    tutor    Tutor?
}

model Availability {
    id      String   @id @default(cuid())
    tutor   Tutor    @relation(fields: [tutorId], references: [id])
    tutorId String
    start   DateTime
    end     DateTime

    @@index([tutorId])
}

model Subject {
    id           String        @id @default(cuid())
    name         String        @unique
    tutors       Tutor[]
    appointments Appointment[]
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    coreSubject  CoreSubject
    level        SubjectLevel  @default(ALL)
}

model Appointment {
    id          String            @id @default(cuid())
    student     User              @relation(fields: [studentId], references: [id])
    studentId   String
    tutor       Tutor             @relation(fields: [tutorId], references: [id])
    tutorId     String
    subject     Subject           @relation(fields: [subjectId], references: [id])
    subjectId   String
    title       String
    description String?
    start       DateTime
    end         DateTime
    price       Float
    status      AppointmentStatus @default(SCHEDULED)
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt

    @@index([studentId])
    @@index([tutorId])
    @@index([subjectId])
}

model Conversation {
    id              String        @id @default(cuid())
    createdAt       DateTime      @default(now())
    participants    Participant[]
    messages        Message[]
    latestMessage   Message?      @relation(name: "latestMessage", fields: [latestMessageId], references: [id], onUpdate: NoAction, onDelete: NoAction)
    latestMessageId String?       @unique
}

model Participant {
    id                String       @id @default(cuid())
    user              User         @relation(fields: [userId], references: [id])
    userId            String
    conversation      Conversation @relation(fields: [conversationId], references: [id])
    readNewestMessage Boolean      @default(false)
    conversationId    String

    @@index([conversationId])
    @@index([userId])
}

model Message {
    id              String        @id @default(cuid())
    message         String        @db.Text
    sentBy          User          @relation(fields: [sentById], references: [id])
    sentById        String
    conversation    Conversation  @relation(fields: [conversationId], references: [id])
    conversationId  String
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
    isLatestMessage Conversation? @relation("latestMessage")

    @@index([sentById])
    @@index([conversationId])
}

model Review {
    id        String   @id @default(cuid())
    rating    Float
    tutor     Tutor    @relation(fields: [tutorId], references: [id])
    tutorId   String
    student   User     @relation(fields: [studentId], references: [id])
    studentId String
    message   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([tutorId])
    @@index([studentId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Role {
    USER
    DISABLED_USER
    PENDING_TUTOR
    VERIFIED_TUTOR
    DISABLED_TUTOR
    ADMIN
    SUPERUSER
}

enum SubjectLevel {
    ALL
    ELEMENTARY
    MIDDLE_SCHOOL
    HIGH_SCHOOL
    AP
    COLLEGE
}

enum CoreSubject {
    MATH
    SCIENCE
    LANGUAGE_ARTS
    SOCIAL_STUDIES
}

enum AppointmentStatus {
    SCHEDULED
    CANCELLED
    COMPLETED
    IN_PROGRESS
}

enum ApplicationStatus {
    welcome
    subject_selection
    basic_info
    profile
    submitted
}

enum MessageSentBy {
    TUTOR
    STUDENT
}
